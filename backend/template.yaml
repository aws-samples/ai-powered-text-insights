# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0

AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: "(SO9130) AI Powered Text Insights"

Parameters:
  AthenaProjectionRangeStart:
    Type: String
    Description: Start date of Athena Partition Projection. Only Posts after this date appear in Athena history table.
    Default: 2022-01-01 00:00:00
    AllowedPattern: '\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}'
    ConstraintDescription: Must be a valid date in the yyyy-MM-dd HH:mm:SS format
  Labels:
    Type: String
    Default: 'Health and fitness, Humor, Personal growth, Philanthropy, Recreation and leisure, Family, friends, and, relationships, Career, Finance, Education and training, Time management'
  SentimentCategories:
    Type: String
    Default: 'Positive, Negative, Neutral'
  ModelId:
    Type: String
    Default: 'anthropic.claude-3-sonnet-20240229-v1:0'
    AllowedValues:
      - 'anthropic.claude-3-haiku-20240307-v1:0'
      - 'anthropic.claude-3-sonnet-20240229-v1:0'
  Language:
    Type: String
    Description: The language that the text to be processed is in
    Default: "en"
  Region:
    Type: String
    Description: The region for the localization services
    Default: "USA"
  AnomalyAlertThreshold:
    Type: Number
    Description: An anomaly must be beyond this threshold to trigger an alert
    Default: 50
  AnomalyDetectionFrequency:
    Type: String
    Description: The frequency at which the detector will look for anomalies
    Default: PT1H

Resources:

  ##########################
  # Logs for state machine #
  ##########################
  ExpressLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 7

  ##################
  # KMS Athena Key #
  ##################
  AthenaSourceKmsKey:
    Type: 'AWS::KMS::Key'
    Properties:
      Description: Used to encrypt athena data and ADs
      EnableKeyRotation: true
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:root
            Action: "kms:*"
            Resource: '*'

  ##############
  # Amazon SNS #
  ##############
  AlertTopic:
    Type: AWS::SNS::Topic
    Properties:
      KmsMasterKeyId: alias/aws/sns
  AlertTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Statement:
          - Sid: AllowPublishThroughSSLOnly
            Action: sns:Publish
            Effect: Deny
            Principal: '*'
            Resource:
              - !Ref AlertTopic
            Condition:
              Bool:
                aws:SecureTransport: false
      Topics:
        - !Ref AlertTopic

  ##############
  # SQS queues #
  ##############
  PostsQueue:
    Type: AWS::SQS::Queue
    Properties:
      KmsMasterKeyId: alias/aws/sqs
      VisibilityTimeout: 200
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt PostsDeadLetterQueue.Arn
        maxReceiveCount: 5
  PostsDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      KmsMasterKeyId: alias/aws/sqs
  PostsQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref PostsQueue
      PolicyDocument:
        Statement:
          - Effect: Deny
            Principal: '*'
            Action: sqs:SendMessage
            Resource: !GetAtt PostsQueue.Arn
            Condition:
              Bool:
                aws:SecureTransport: false
  PostsDeadLetterQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref PostsDeadLetterQueue
      PolicyDocument:
        Statement:
          - Effect: Deny
            Principal: '*'
            Action: sqs:SendMessage
            Resource: !GetAtt PostsDeadLetterQueue.Arn
            Condition:
              Bool:
                aws:SecureTransport: false

  ##############
  # S3 buckets #
  ##############
  PostsBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      OwnershipControls:
        Rules:
          - ObjectOwnership: ObjectWriter
      LoggingConfiguration:
        DestinationBucketName: !Ref LoggingBucket
        LogFilePrefix: "posts-bucket/"
  PostsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref PostsBucket
      PolicyDocument:
        Statement:
          - Effect: Deny
            Principal: "*"
            Action: "*"
            Resource:
              - !Sub "arn:aws:s3:::${PostsBucket}/*"
              - !Sub "arn:aws:s3:::${PostsBucket}"
            Condition:
              Bool:
                aws:SecureTransport: false
  AthenaResultsBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      OwnershipControls:
        Rules:
          - ObjectOwnership: ObjectWriter
      LoggingConfiguration:
        DestinationBucketName: !Ref LoggingBucket
        LogFilePrefix: "athena-results-bucket/"
  AthenaResultsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref AthenaResultsBucket
      PolicyDocument:
        Statement:
          - Effect: Deny
            Principal: "*"
            Action: "*"
            Resource:
              - !Sub "arn:aws:s3:::${AthenaResultsBucket}/*"
              - !Sub "arn:aws:s3:::${AthenaResultsBucket}"
            Condition:
              Bool:
                aws:SecureTransport: false
  LoggingBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      OwnershipControls:
        Rules:
          - ObjectOwnership: ObjectWriter
      AccessControl: LogDeliveryWrite
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W35
            reason: S3 Bucket access logging not needed here
  LoggingBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref LoggingBucket
      PolicyDocument:
        Statement:
          - Effect: Deny
            Principal: "*"
            Action: "*"
            Resource:
              - !Sub "arn:aws:s3:::${LoggingBucket}/*"
              - !Sub "arn:aws:s3:::${LoggingBucket}"
            Condition:
              Bool:
                aws:SecureTransport: false

  ###################################
  # State Machine to classify posts #
  ###################################
  ProcessPostStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Type: EXPRESS
      Logging:
        Level: ALL
        IncludeExecutionData: True
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt ExpressLogGroup.Arn
      DefinitionUri: state_machine/process_post.asl.json
      DefinitionSubstitutions:
        ExtractInisghtsFunctionArn: !GetAtt ExtractInsightsFunction.Arn
        AddLocationFunctionArn: !GetAtt AddLocationFunction.Arn
        SavePostFunctionArn: !GetAtt SavePostFunction.Arn
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref ExtractInsightsFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref AddLocationFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref SavePostFunction
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: "logs:*"
              Resource: "*"

  ##################################################################
  # SQS queue Lambda function consumer (invokes the state machine) #
  ##################################################################
  TriggerOnSQSFunction:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: python3.12
      Timeout: 180
      Handler: lambda.handler
      CodeUri: lambdas/workflow_from_sqs/
      Policies:
        - SQSPollerPolicy:
            QueueName: !GetAtt PostsQueue.QueueName
        - StepFunctionsExecutionPolicy:
            StateMachineName: !GetAtt ProcessPostStateMachine.Name
      Environment:
        Variables:
          LOG_LEVEL: info
          PROCESS_POST_STATE_MACHINE: !Ref ProcessPostStateMachine
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt PostsQueue.Arn
            BatchSize: 3
            FunctionResponseTypes:
              - ReportBatchItemFailures

  ########################################################
  # Function to process the post                         #
  ########################################################
  ExtractInsightsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: python3.12
      Timeout: 180
      Handler: lambda.handler
      CodeUri: lambdas/process_post/
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: "bedrock:InvokeModel"
              Resource: "*"
      Environment:
        Variables:
          MODEL_ID: !Ref ModelId
          LABELS: !Ref Labels
          LOG_LEVEL: info
          LANGUAGE_CODE: !Ref Language
          SENTIMENT_LABELS: !Ref SentimentCategories

  ################################################
  # Function to obtain coordinates from the post #
  ################################################
  AddLocationFunction:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: python3.12
      Timeout: 180
      Handler: lambda.handler
      CodeUri: lambdas/locate_post/
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: "geo:SearchPlaceIndexForText"
              Resource:
                - !GetAtt PlaceIndex.Arn
      Environment:
        Variables:
          LANGUAGE: !Ref Language
          GEO_REGION: !Ref Region
          PLACE_INDEX_NAME: !Ref PlaceIndex
          LOG_LEVEL: info

  ##############################################
  # Function to save the post and its metadata #
  ##############################################
  SavePostFunction:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: python3.12
      Timeout: 180
      Handler: lambda.handler
      CodeUri: lambdas/save_post/
      Policies:
      - S3WritePolicy:
          BucketName: !Ref PostsBucket
      Environment:
        Variables:
          POSTS_BUCKET: !Ref PostsBucket
          LOG_LEVEL: info

  ########################################################################
  # Lambda to execute custom resource to create the L4M anomaly detector #
  ########################################################################
  CreateL4MDetectorFunction:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: python3.12
      Timeout: 180
      Handler: lambda.handler
      CodeUri: lambdas/custom_resources/lookout4metrics/
      Policies:
        # Lookout for metrics policy (required for creating the detector)
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - lookoutmetrics:CreateAnomalyDetector
                - lookoutmetrics:CreateAlert
                - lookoutmetrics:ActivateAnomalyDetector
                - lookoutmetrics:CreateMetricSet
              Resource:
                - !Sub "arn:aws:lookoutmetrics:*:${AWS::AccountId}:MetricSet/*/*"
                - !Sub "arn:aws:lookoutmetrics:*:${AWS::AccountId}:Alert:*"
                - !Sub "arn:aws:lookoutmetrics:*:${AWS::AccountId}:AnomalyDetector:*"
                - !Sub "arn:aws:lookoutmetrics:*:${AWS::AccountId}:*"
            - Effect: Allow
              Action: "iam:PassRole"
              Resource:
                - !GetAtt AthenaSourceAccessRole.Arn
                - !GetAtt SnsPublishRole.Arn

  #######################################################################
  # Custom resource to create anomaly detector with lookout for metrics #
  #######################################################################
  CreateLookoutMetricsResource:
    Type: Custom::CreateLookoutMetrics
    DependsOn:
      - AthenaSourceAccessRole
      - SnsPublishRole
      - AlertTopic
      - AthenaWorkGroup
      - GlueDatabase
      - GlueTopicsTable
    Properties:
      ServiceToken: !GetAtt CreateL4MDetectorFunction.Arn
      Target:
        AthenaRoleArn: !GetAtt AthenaSourceAccessRole.Arn
        SnsRoleArn: !GetAtt SnsPublishRole.Arn
        SnsTopicArn: !Ref AlertTopic
        AlertThreshold: !Ref AnomalyAlertThreshold
        AthenaWorkgroupName: !Ref AthenaWorkGroup
        GlueDbName: !Ref GlueDatabase
        GlueTableName: !Ref GlueTopicsTable
        AwsDataCatalog: AwsDataCatalog
        DetectorFrequency: !Ref AnomalyDetectionFrequency
      Body: |


  ################
  # Athena setup #
  ################
  AthenaWorkGroup:
    Type: AWS::Athena::WorkGroup
    Properties:
      Name: !Sub "${AWS::StackName}-PostsWorkGroup"
      WorkGroupConfiguration:
        EnforceWorkGroupConfiguration: false
        ResultConfiguration:
          EncryptionConfiguration:
            EncryptionOption: SSE_KMS
            KmsKey: !Ref AthenaSourceKmsKey
          OutputLocation: !Sub "s3://${AthenaResultsBucket}/"
  GlueDatabase:
    Type: AWS::Glue::Database
    Properties:
      CatalogId: !Ref "AWS::AccountId"
      DatabaseInput:
        Name: !Sub "${AWS::StackName}_db"
  GluePostsTable:
    Type: AWS::Glue::Table
    Properties:
      CatalogId: !Ref "AWS::AccountId"
      DatabaseName: !Ref GlueDatabase
      TableInput:
        Name: posts
        PartitionKeys:
          - Name: partition_timestamp
            Type: timestamp
        StorageDescriptor:
          Columns:
            - Name: longitude
              Type: float
            - Name: latitude
              Type: float
            - Name: location
              Type: string
            - Name: topic
              Type: string
            - Name: sentiment
              Type: string
            - Name: created_at
              Type: timestamp
            - Name: model
              Type: string
            - Name: notification
              Type: boolean
            - Name: timestamp
              Type: timestamp
            - Name: text
              Type: string
            - Name: text_clean
              Type: string
            - Name: user
              Type: string
            - Name: source
              Type: string
            - Name: count
              Type: tinyint
            - Name: platform
              Type: string
          Compressed: False
          Location: !Sub "s3://${PostsBucket}/posts"
          InputFormat: org.apache.hadoop.mapred.TextInputFormat
          OutputFormat: org.apache.hadoop.hive.ql.io.IgnoreKeyTextOutputFormat
          SerdeInfo:
            SerializationLibrary: org.apache.hive.hcatalog.data.JsonSerDe
        Parameters:
          "projection.enabled": "true"
          "projection.partition_timestamp.type": "date"
          "projection.partition_timestamp.format": "yyyy-MM-dd HH:mm:SS"
          "projection.partition_timestamp.range": !Sub "${AthenaProjectionRangeStart},NOW+1DAY"
          "projection.partition_timestamp.interval": "15"
          "projection.partition_timestamp.interval.unit": "MINUTES"
          "storage.location.template": !Sub "s3://${PostsBucket}/posts/${!partition_timestamp}/"
        TableType: EXTERNAL_TABLE
  GluePhrasesTable:
    Type: AWS::Glue::Table
    Properties:
      CatalogId: !Ref "AWS::AccountId"
      DatabaseName: !Ref GlueDatabase
      TableInput:
        Name: phrases
        PartitionKeys:
          - Name: partition_timestamp
            Type: timestamp
        StorageDescriptor:
          Columns:
            - Name: created_at
              Type: timestamp
            - Name: timestamp
              Type: timestamp
            - Name: text_clean
              Type: string
            - Name: user
              Type: string
            - Name: platform
              Type: string
            - Name: phrase
              Type: string
            - Name: count
              Type: tinyint
          Compressed: False
          Location: !Sub "s3://${PostsBucket}/phrases"
          InputFormat: org.apache.hadoop.mapred.TextInputFormat
          OutputFormat: org.apache.hadoop.hive.ql.io.IgnoreKeyTextOutputFormat
          SerdeInfo:
            SerializationLibrary: org.apache.hive.hcatalog.data.JsonSerDe
        Parameters:
          "projection.enabled": "true"
          "projection.partition_timestamp.type": "date"
          "projection.partition_timestamp.format": "yyyy-MM-dd HH:mm:SS"
          "projection.partition_timestamp.range": !Sub "${AthenaProjectionRangeStart},NOW+1DAY"
          "projection.partition_timestamp.interval": "1"
          "projection.partition_timestamp.interval.unit": "DAYS"
          "storage.location.template": !Sub "s3://${PostsBucket}/phrases/${!partition_timestamp}/"
        TableType: EXTERNAL_TABLE
  GlueTopicsTable:
    Type: AWS::Glue::Table
    Properties:
      CatalogId: !Ref "AWS::AccountId"
      DatabaseName: !Ref GlueDatabase
      TableInput:
        Name: topics
        PartitionKeys:
          - Name: partition_timestamp
            Type: timestamp
        StorageDescriptor:
          Columns:
            - Name: created_at
              Type: timestamp
            - Name: timestamp
              Type: timestamp
            - Name: text_clean
              Type: string
            - Name: user
              Type: string
            - Name: platform
              Type: string
            - Name: topic
              Type: string
            - Name: sentiment
              Type: string
            - Name: longitude
              Type: float
            - Name: latitude
              Type: float
            - Name: location
              Type: string
            - Name: count
              Type: tinyint
          Compressed: False
          Location: !Sub "s3://${PostsBucket}/topics"
          InputFormat: org.apache.hadoop.mapred.TextInputFormat
          OutputFormat: org.apache.hadoop.hive.ql.io.IgnoreKeyTextOutputFormat
          SerdeInfo:
            SerializationLibrary: org.apache.hive.hcatalog.data.JsonSerDe
        Parameters:
          "projection.enabled": "true"
          "projection.partition_timestamp.type": "date"
          "projection.partition_timestamp.format": "yyyy-MM-dd HH:mm:SS"
          "projection.partition_timestamp.range": !Sub "${AthenaProjectionRangeStart},NOW+1DAY"
          "projection.partition_timestamp.interval": "1"
          "projection.partition_timestamp.interval.unit": "DAYS"
          "storage.location.template": !Sub "s3://${PostsBucket}/topics/${!partition_timestamp}/"
        TableType: EXTERNAL_TABLE
  GlueLinksTable:
    Type: AWS::Glue::Table
    Properties:
      CatalogId: !Ref "AWS::AccountId"
      DatabaseName: !Ref GlueDatabase
      TableInput:
        Name: links
        PartitionKeys:
          - Name: partition_timestamp
            Type: timestamp
        StorageDescriptor:
          Columns:
            - Name: created_at
              Type: timestamp
            - Name: timestamp
              Type: timestamp
            - Name: text_clean
              Type: string
            - Name: user
              Type: string
            - Name: platform
              Type: string
            - Name: link
              Type: string
            - Name: count
              Type: tinyint
          Compressed: False
          Location: !Sub "s3://${PostsBucket}/links"
          InputFormat: org.apache.hadoop.mapred.TextInputFormat
          OutputFormat: org.apache.hadoop.hive.ql.io.IgnoreKeyTextOutputFormat
          SerdeInfo:
            SerializationLibrary: org.apache.hive.hcatalog.data.JsonSerDe
        Parameters:
          "projection.enabled": "true"
          "projection.partition_timestamp.type": "date"
          "projection.partition_timestamp.format": "yyyy-MM-dd HH:mm:SS"
          "projection.partition_timestamp.range": !Sub "${AthenaProjectionRangeStart},NOW+1DAY"
          "projection.partition_timestamp.interval": "1"
          "projection.partition_timestamp.interval.unit": "DAYS"
          "storage.location.template": !Sub "s3://${PostsBucket}/links/${!partition_timestamp}/"
        TableType: EXTERNAL_TABLE

  #########################################
  # Athena policy for Lookout for Metrics #
  #########################################
  AthenaSourceAccessRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: ['sts:AssumeRole']
            Effect: Allow
            Principal:
              Service: ['lookoutmetrics.amazonaws.com']
              AWS: !Sub "${AWS::AccountId}"
        Version: '2012-10-17'
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - 'glue:GetCatalogImportStatus'
                  - 'glue:GetDatabase'
                  - 'glue:GetTable'
                Effect: Allow
                Resource:
                  - !Sub "arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:catalog"
                  - !Sub "arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:database/${GlueDatabase}"
                  - !Sub "arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:table/${GlueDatabase}/*"
              - Action:
                  - 's3:GetObject'
                  - 's3:ListBucket'
                  - 's3:PutObject'
                  - 's3:GetBucketLocation'
                  - 's3:ListBucketMultipartUploads'
                  - 's3:ListMultipartUploadParts'
                  - 's3:AbortMultipartUpload'
                Effect: Allow
                Resource:
                  - !Sub "arn:${AWS::Partition}:s3:::${AthenaResultsBucket}"
                  - !Sub "arn:${AWS::Partition}:s3:::${AthenaResultsBucket}/*"
                  - !Sub "arn:${AWS::Partition}:s3:::${PostsBucket}"
                  - !Sub "arn:${AWS::Partition}:s3:::${PostsBucket}/*"
              - Action:
                  - 'athena:CreatePreparedStatement' # On WG
                  - 'athena:DeletePreparedStatement' # On WG
                  - 'athena:GetDatabase'
                  - 'athena:GetPreparedStatement' # On WG
                  - 'athena:GetQueryExecution'
                  - 'athena:GetQueryResults' # On WG
                  - 'athena:GetQueryResultsStream'
                  - 'athena:GetTableMetadata'
                  - 'athena:GetWorkGroup'
                  - 'athena:StartQueryExecution'
                Effect: Allow
                Resource:
                  - !Sub "arn:${AWS::Partition}:athena:${AWS::Region}:${AWS::AccountId}:datacatalog/*"
                  - !Sub "arn:${AWS::Partition}:athena:${AWS::Region}:${AWS::AccountId}:workgroup/primary"
                  - !Sub "arn:${AWS::Partition}:athena:${AWS::Region}:${AWS::AccountId}:workgroup/${AthenaWorkGroup}"
              - Action: [ 'kms:GenerateDataKey', 'kms:Decrypt' ]
                Effect: Allow
                Resource:
                  - !GetAtt AthenaSourceKmsKey.Arn
            Version: '2012-10-17'
          PolicyName: 'AthenaAccessPolicy'

  ######################################
  # SNS policy for Lookout for Metrics #
  ######################################
  SnsPublishRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: ['sts:AssumeRole']
            Effect: Allow
            Principal:
              Service: ['lookoutmetrics.amazonaws.com']
              AWS: !Sub "${AWS::AccountId}"
        Version: '2012-10-17'
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - 'sns:Publish'
                Effect: Allow
                Resource:
                  - !Ref AlertTopic
            Version: '2012-10-17'
          PolicyName: 'AthenaAccessPolicy'

  ############################################
  # Place index creation (Location services) #
  ############################################
  PlaceIndex:
    Type: AWS::Location::PlaceIndex
    Properties:
      DataSource: Esri
      Description: Place Index
      IndexName: !Sub 'PlaceIndex-${AWS::StackName}'


Outputs:
  AwsRegion:
    Value: !Ref 'AWS::Region'
  PostsQueueUrl:
    Value: !Ref PostsQueue
  PostsQueueArn:
    Value: !GetAtt PostsQueue.Arn
  AlertTopicArn:
    Value: !Ref AlertTopic
  PostsBucketName:
    Value: !Ref PostsBucket
  PlaceIndexName:
    Value: !Ref PlaceIndex
  AthenaAccessRoleARN:
    Value: !GetAtt AthenaSourceAccessRole.Arn
  SnsPublishRoleARN:
    Value: !GetAtt SnsPublishRole.Arn
  KMSAthenaKey:
    Value: !Ref AthenaSourceKmsKey
